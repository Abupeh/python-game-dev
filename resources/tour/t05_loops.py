"""
Python loops: for, while
"""

# Python has two types of loops: for and while.
# A for loop lets you run code a certain number of times or to iterate over a sequence.

# Let's count with a for loop:
for counting_num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
    print(counting_num)

# Here, 'counting_num' is a variable that gets a new value on each iteration of the loop.
# The first time the code runs, 'counting_num' is 1. The second time the code runs, 'counting_num' is 2.
# And so on. The for loop will keep executing until it gets to the end of the list. Once the loop is done,
# the program continues with the rest of the code.

# Python has a built-in function called 'range' that makes it easy to create a list of numbers. This is equivalent:
for num in range(1, 11):
    print(num)

# Why do you think the range function starts at 1 and ends at 11? What happens if you change the numbers?


# You can loop over lists of strings, too:
for cub in [
    "Dansby Swanson",
    "Nico Hoerner",
    "Michael Bush",
    "Seiya Suzuki",
    "Shota Imanaga",
]:
    print(f"I hope {cub} has a great season")

# Here's the structure of a for loop:
#   - The 'for' keyword
#   - A variable name (it can be anything you want; try to make it descriptive)
#   - The 'in' keyword
#   - A list of values to loop over (the list could be generated by Python's 'range' function)
#   - A colon (:)
#   - The indented block of code you want to execute on each iteration

# You've seen you can loop over lists. You can also loop over the characters in a string.
# In this example, I'll also use a conditional statement inside the for block
for letter in "miniscule isn't such a miniscule word":
    if letter in ["a", "e", "i", "o", "u"]:
        print(letter)

# Another example: you could use a loop to count the number of spaces in a string:
num_of_spaces = 0
num_of_letters = 0
for char in "the lazy dog jumped over the quick brown fox":
    if char == " ":
        num_of_spaces += 1
    else:
        num_of_letters += 1

print(f"Number of spaces: {num_of_spaces}")
print(f"Number of letters: {num_of_letters}")
print(
    num_of_spaces + num_of_letters
    == len("the lazy dog jumped over the quick brown fox")
)

# Wondering if you can loop over the elements of a tuple? Try!


# You can also loop over the keys in a dictionary


# Or you can loop over a dictionary's values if you use the dictionary's `values` method


# And if you use the `items' method and the trick we learned about assignming multiple variables at once,
# you can assign one variable to the key and another variable to the value stored at that key.
